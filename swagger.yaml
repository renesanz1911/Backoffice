openapi: 3.0.3
info:
  title: Backoffice
  version: 1.0.11
tags:
  - name: post
    description: Operations about post

paths:
  /post:
    get:
      tags:
        - post
      summary: Get all posts
      description: Get all posts
      operationId: getPosts
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponseList'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
        '405':
          description: Validation exception
    post:
      tags:
        - post
      summary: Add a new post
      description: Add a new post to posts
      operationId: addPost
      requestBody:
        description: Create a new post
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCreateRequest'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '405':
          description: Invalid input


  /post/{postId}:
    get:
      tags:
        - post
      summary: Get post by id
      description: Get post by id
      operationId: getPostById
      parameters:
        - name: postId
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '400':
          description: Invalid ID supplied
        '404':
          description: post not found
        '405':
          description: Validation exception
    put:
      tags:
        - post
      summary: Update an existing post
      description: Update an existing post by Id
      operationId: updatePost
      parameters:
        - name: postId
          in: path
          description: ID of post to return
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Update an existent post
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostUpdateRequest'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '400':
          description: Invalid ID supplied
        '404':
          description: Post not found
        '405':
          description: Validation exception
    delete:
      tags:
        - post
      summary: Deletes a post
      description: delete a post by Id
      operationId: deletePost
      parameters:
        - name: postId
          in: path
          description: Post id to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Post deleted successfully
        '400':
          description: Invalid ID supplied
        '404':
          description: Post not found

components:
  schemas:
    PostUpdateRequest:
      type: object
      properties:
        title:
          type: string
          example: este es el titulo del post
        summary:
          type: string
          example: este es el reumen del post
        tags:
          type: array
          items:
            type: string
          example: [tag1, tag2]
        content:
          type: string
          example: contenido del post
        picture:
          type: string
          format: base64
        updatedBy:
          type: string
          example: creator
        publihsed:
          type: boolean
        deleted:
          type: boolean
    PostCreateRequest:
      type: object
      properties:
        title:
          type: string
          example: este es el titulo del post
        summary:
          type: string
          example: este es el reumen del post
        tags:
          type: array
          items:
            type: string
          example: [tag1, tag2]
        content:
          type: string
          example: contenido del post
        picture:
          type: string
          format: base64
        createdBy:
          type: string
          example: creator
        publihsed:
          type: boolean
        deleted:
          type: boolean
    PostResponseList:
      type: array
      items:
        $ref: '#/components/schemas/PostResponse'
    PostResponse:
      type: object
      properties:
        postId:
          type: string
          format: uuid
        title:
          type: string
          example: este es el titulo del post
        summary:
          type: string
          example: este es el reumen del post
        tags:
          type: array
          items:
            type: string
          example: [tag1, tag2]
        content:
          type: string
          example: contenido del post
        picture:
          type: string
          format: base64
        createdBy:
          type: string
          example: creator
        publishedAt:
          type: string
          format: date